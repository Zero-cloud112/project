@startuml ADHD_Assessment_System_UML

' 主系統類別
class ADHDAssessmentSystem {
  - systemName: String
  - version: String
  - currentDate: Date
  + initialize(): void
  + shutdown(): void
  + getSystemStatus(): String
}

' 骨架偵測模組
package "骨架偵測模組" {
  class SkeletonDetectionModule {
    - camera: Camera
    - poseDetector: MediapipePose
    - isRunning: boolean
    - countdownTimer: int
    + startDetection(): void
    + stopDetection(): void
    + captureFrame(): Frame
    + getSkeletonData(): List<SkeletonKeypoint>
  }

  class Camera {
    - cameraID: int
    - resolution: int
    - frameRate: int
    + open(): void
    + close(): void
    + captureImage(): Image
    + getVideoStream(): VideoStream
  }

  class MediapipePose {
    - modelPath: String
    - confidenceThreshold: float
    + detectPose(image: Image): Pose
    + extractKeypoints(image: Image): List<Keypoint>
    + getLandmarks(): List<Landmark>
  }

  class SkeletonKeypoint {
    - keypointID: int
    - keypointName: String
    - x: float
    - y: float
    - z: float
    - visibility: float
    + getCoordinates(): Coordinate
    + getVisibility(): float
  }
}

' 特徵計算模組
package "特徵計算模組" {
  class FeatureCalculationModule {
    - windowSize: int
    - slideStep: int
    - features: List<SkeletonFeature>
    + calculateFeatures(skeletonData: List): List<SkeletonFeature>
    + calculateVariance(features: List): List<FeatureVariance>
    + getSlidingWindowData(): List
  }

  class SkeletonFeature {
    - featureName: String
    - featureValue: float
    - featureType: String
    + calculateAngle(p1, p2, p3): float
    + calculateDistance(p1, p2): float
    + calculateRatio(l1, l2): float
  }

  class FeatureVariance {
    - featureName: String
    - variance: float
    - mean: float
    - stdDev: float
    - windowIndex: int
    + computeVariance(values: List): float
    + getStatistics(): Statistics
  }
}

' ADHD預測模組
package "ADHD預測模組" {
  class ADHDPredictionModule {
    - model: MLModel
    - modelPath: String
    - threshold: float
    + loadModel(): void
    + predict(features: List): PredictionResult
    + getProbability(): float
    + saveResults(): void
  }

  class MLModel {
    - modelType: String
    - modelVersion: String
    - trainedDate: Date
    + load(modelPath: String): void
    + predict(inputData: List): float
    + getConfidence(): float
  }

  class PredictionResult {
    - adhdProbability: float
    - timestamp: Date
    - patientID: String
    - analysisID: String
    + getProbability(): float
    + getTimestamp(): Date
    + exportToCSV(): void
  }
}

' 資料輸出模組
package "資料輸出模組" {
  class DataOutputModule {
    - outputDirectory: String
    - fileFormat: String
    + saveSkeletonSequence(data, filename): void
    + saveFeatureVariance(data, filename): void
    + savePredictionResult(result, filename): void
    + saveVideo(videoData, filename): void
    + exportCSV(data, filename): void
  }

  class OutputFile {
    - fileName: String
    - filePath: String
    - fileType: String
    - createdDate: Date
    - fileSize: long
    + create(): void
    + write(data): void
    + close(): void
    + getPath(): String
  }
}

' 視覺化模組
package "視覺化與管理介面模組" {
  class VisualizationModule {
    - dashboard: DashboardInterface
    - charts: List<Chart>
    + loadLatestResults(): void
    + displayProbabilityChart(): void
    + displayVarianceChart(): void
    + updateRealtime(): void
  }

  class DashboardInterface {
    - interfaceTitle: String
    - refreshRate: int
    - autoUpdate: boolean
    + initialize(): void
    + refresh(): void
    + loadData(resultData): void
    + displayCharts(): void
  }

  class Chart {
    - chartType: String
    - title: String
    - dataPoints: List<DataPoint>
    + createLineChart(): Chart
    + createBarChart(): Chart
    + updateData(newData): void
    + render(): void
  }

  class DataPoint {
    - xValue: float
    - yValue: float
    - label: String
    - timestamp: Date
    + getCoordinates(): Coordinate
    + getLabel(): String
  }
}

' 病歷管理模組
package "病歷管理模組" {
  class MedicalRecordModule {
    - database: RecordDatabase
    - storageLocation: String
    + createRecord(patientID): MedicalRecord
    + searchRecord(keyword): List<MedicalRecord>
    + updateRecord(recordID, data): void
    + deleteRecord(recordID): void
    + filterByDate(startDate, endDate): List
    + filterByKeyword(keyword): List
  }

  class RecordDatabase {
    - databasePath: String
    - records: List<MedicalRecord>
    + connect(): void
    + disconnect(): void
    + query(criteria): List
    + insert(record): void
    + update(record): void
    + delete(recordID): void
  }

  class MedicalRecord {
    - recordID: String
    - patientID: String
    - patientName: String
    - age: int
    - gender: String
    - recordDate: Date
    - analysisResults: List<PredictionResult>
    - videoFiles: List<String>
    + getRecordInfo(): RecordInfo
    + addAnalysisResult(result): void
    + updatePatientInfo(info): void
    + exportRecord(): void
  }

  class Patient {
    - patientID: String
    - name: String
    - age: int
    - gender: String
    - birthDate: Date
    - contactInfo: String
    + getPatientInfo(): PatientInfo
    + updateInfo(newInfo): void
  }
}

' 關聯關係
ADHDAssessmentSystem "1" *-- "1" SkeletonDetectionModule
ADHDAssessmentSystem "1" *-- "1" FeatureCalculationModule
ADHDAssessmentSystem "1" *-- "1" ADHDPredictionModule
ADHDAssessmentSystem "1" *-- "1" DataOutputModule
ADHDAssessmentSystem "1" *-- "1" VisualizationModule
ADHDAssessmentSystem "1" *-- "1" MedicalRecordModule

SkeletonDetectionModule "1" --> "1" Camera : uses
SkeletonDetectionModule "1" --> "1" MediapipePose : uses
SkeletonDetectionModule "1" --> "*" SkeletonKeypoint : generates

FeatureCalculationModule "1" --> "*" SkeletonFeature : calculates
FeatureCalculationModule "1" --> "*" FeatureVariance : produces
FeatureCalculationModule --> SkeletonKeypoint : processes

ADHDPredictionModule "1" --> "1" MLModel : uses
ADHDPredictionModule "1" --> "*" PredictionResult : generates
ADHDPredictionModule --> FeatureVariance : analyzes

DataOutputModule "1" --> "*" OutputFile : creates
DataOutputModule --> PredictionResult : exports
DataOutputModule --> SkeletonKeypoint : exports
DataOutputModule --> FeatureVariance : exports

VisualizationModule "1" --> "1" DashboardInterface : uses
VisualizationModule "1" --> "*" Chart : displays
Chart "1" *-- "*" DataPoint : contains
VisualizationModule --> PredictionResult : visualizes

MedicalRecordModule "1" --> "1" RecordDatabase : manages
RecordDatabase "1" o-- "*" MedicalRecord : stores
MedicalRecord "*" --> "1" Patient : belongs to
MedicalRecord "1" o-- "*" PredictionResult : contains

@enduml
